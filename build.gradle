plugins {
	id 'java'
	id 'org.springframework.boot' version '3.+'
	id 'io.spring.dependency-management' version '1.+'
	id "io.github.kobylynskyi.graphql.codegen" version "5.+"
	id "org.sonarqube" version "5.+"
	id "jacoco"
	
}

group = 'de.unistuttgart.iste.meitrex'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

def jacocoEnabled = System.properties.getProperty("jacocoEnabled") ?: "true"

// Apply JaCoCo settings only if jacaco is enable
if (jacocoEnabled.toBoolean()) {
	project.logger.lifecycle('Applying jacoco settings from jacoco.gradle')
	apply from: rootProject.file("jacoco.gradle")
}

sonarqube {
  properties {
    property("sonar.projectKey", "MEITREX_dinodev_gropius_adapter")
    property("sonar.organization", "meitrex")
    property("sonar.host.url", "https://sonarcloud.io")
  }
}

def gropiusUrl = System.properties.getProperty("gropiusUrl") ?: "http://localhost:8080"

// run this task to refresh the Gropius schema
// it will download the schema from the Gropius server and save it to src/main/resources/graphql/gropius.graphqls
// this task is not run automatically, you have to run it manually (so you can control when the schema is updated)
// you can run it from the command line with `./gradlew refreshGropiusSchema`
tasks.register('refreshGropiusSchema', Exec) {
	def filePath = 'src/main/resources/graphql/gropius.graphqls'

	commandLine 'curl', "${gropiusUrl}/sdl", '-o', filePath
}

// generate gropius client
graphqlCodegen {
	// all config options:
	// https://github.com/kobylynskyi/graphql-java-codegen/blob/main/docs/codegen-options.md
	graphqlSchemas {
		rootDir = file("src/main/resources/graphql")
		includePattern = "gropius.graphqls"
	}
	outputDir = new File("$buildDir/generated/gropius")
	packageName = "de.unistuttgart.iste.gropius.generated.dto"
	generatedAnnotation = "jakarta.annotation.Generated"
	modelValidationAnnotation = "jakarta.validation.constraints.NotNull"
	generateApis = false // set to false as the generator does not support spring boot graphQL
	customTypesMapping = [
			"DateTime"                    : "java.time.OffsetDateTime",
			"Date"                        : "java.time.LocalDate",
			"Time"                        : "java.time.OffsetTime",
			"LocalTime"                   : "java.time.LocalTime",
			"UUID"                        : "java.util.UUID",
			"Url"                         : "java.net.URL",
			"JSON"                        : "java.lang.Object",
			"DateTimeFilterInput.gt"      : "String", // serialization of OffsetDateTime does not work
			"Assignment.user"             : "GropiusGropiusUser", // concrete sub type to allow serialization of the user object
			"TimelineItemConnection.nodes": "de.unistuttgart.iste.meitrex.scrumgame.ims.gropius.executor.GropiusProjections.TimelineItemResponse",
			"TrackableConnection.nodes"   : "de.unistuttgart.iste.meitrex.scrumgame.ims.gropius.executor.GropiusProjections.TrackableResponse",
	]
	modelNamePrefix = "Gropius"
	generateEqualsAndHashCode = true
	generateToString = true
	generateClient = true
	// add fields that should be generated in the model classes
	fieldsWithoutResolvers = ["Project", "Issue", "Component"]
}

// Automatically generate GraphQL code on project build:
compileJava.dependsOn 'graphqlCodegen'

// Add generated sources to your project source sets:
sourceSets.main.java.srcDir "$buildDir/generated/gropius"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'de.unistuttgart.iste.meitrex:meitrex-common:1.2'
	implementation 'de.unistuttgart.iste.meitrex:dinodev_common:1.2'
	implementation 'de.unistuttgart.iste.meitrex:gamification_engine:1.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.modelmapper:modelmapper:3.+'
	implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'
	implementation 'com.graphql-java:graphql-java-extended-validation:22.0'
	implementation 'io.github.kobylynskyi:graphql-java-codegen:5.+'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'de.unistuttgart.iste.meitrex:meitrex-common-test:1.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework:spring-webflux'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation "org.mockito:mockito-core:5.+"
	testImplementation 'org.hamcrest:hamcrest:2.+'
	testImplementation "org.testcontainers:postgresql:1.+"
	testImplementation "org.testcontainers:junit-jupiter:1.+"
}

tasks.named('test') {
	useJUnitPlatform()
}
